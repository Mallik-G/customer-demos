{
	"name": "IncrementalLoadDataFlow",
	"properties": {
		"activities": [
			{
				"name": "LookupMetaData",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource"
					},
					"dataset": {
						"referenceName": "SQL_Metadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachSourceTable",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "LookupMetaData",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('LookupMetaData').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "CopyOneTable",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('select ',item().TableName,'.PK, ',item().TableName,'.col1, ',item().TableName,'.col2 from ',item().TableName,', CRSTAT where CRSTAT.table_name = ''',item().TableName,''' and ',item().TableName,'.PK = CRSTAT.PK and CRSTAT.update_dt >= ''',item().LastProcessTime,''' and CRSTAT.update_dt < ''',formatDateTime(pipeline().TriggerTime,'s'),''' ')",
										"type": "Expression"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "SqlDataSource",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "CopyParquetOutput",
									"type": "DatasetReference",
									"parameters": {
										"filename": {
											"value": "@concat(item().TableName,'_at_',formatDateTime(pipeline().TriggerTime,'s'))",
											"type": "Expression"
										},
										"folderPath": "parquetCrud/input/tables"
									}
								}
							]
						},
						{
							"name": "Update Meta Data Table",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyOneTable",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[update_meta_data_table]",
								"storedProcedureParameters": {
									"LastProcessTime": {
										"value": {
											"value": "@formatDateTime(pipeline().TriggerTime,'s')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"TableName": {
										"value": {
											"value": "@item().TableName",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SQL",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Copy PK Table",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "LookupMetaData",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select * from  CRSTAT where CRSTAT.update_dt >= '@{activity('LookupMetaData').output.value[0].LastProcessTime}' and CRSTAT.update_dt < '@{formatDateTime(pipeline().TriggerTime,'s')}'",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "SqlDataSource",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "CopyParquetOutput",
						"type": "DatasetReference",
						"parameters": {
							"filename": {
								"value": "@concat('PK_table_at_',formatDateTime(pipeline().TriggerTime,'s'))",
								"type": "Expression"
							},
							"folderPath": "parquetCrud/input/pk"
						}
					}
				]
			},
			{
				"name": "ParquetCrudDataFLow",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ForEachSourceTable",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Copy PK Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "ParquetCrud",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			}
		],
		"folder": {
			"name": "IncrementalLoad"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}