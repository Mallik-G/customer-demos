{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "daperlov-customer-demos"
		},
		"ADLSGen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLSGen2'"
		},
		"SQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL'"
		},
		"ADLSGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://perlovskybugbash.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADLSGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLSGen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQL_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoTumblingWindow1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2019-07-29T20:00:00.000Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyParquetOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"folderPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ParquetCrud"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "sample-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK",
						"type": "INT32"
					},
					{
						"name": "col1",
						"type": "UTF8"
					},
					{
						"name": "col2",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PKInput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParquetCrud"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquetCrud/input/pk",
						"fileSystem": "sample-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "table_name",
						"type": "UTF8"
					},
					{
						"name": "update_dt",
						"type": "INT96"
					},
					{
						"name": "PK",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetCrudOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParquetCrud"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquetCrud/output",
						"fileSystem": "sample-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK",
						"type": "INT32"
					},
					{
						"name": "col1",
						"type": "UTF8"
					},
					{
						"name": "col2",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetInput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParquetCrud"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "parquetCrud/input/tables",
						"fileSystem": "sample-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK",
						"type": "INT32"
					},
					{
						"name": "col1",
						"type": "UTF8"
					},
					{
						"name": "col2",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParquetCrud"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "LastProcessTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[metadata_table]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlDataSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParquetCrud"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoTumblingWindow2')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 1,
					"startTime": "2019-07-29T20:30:00.000Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"size": "102:00:00",
							"referenceTrigger": {
								"referenceName": "DemoTumblingWindow1",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/triggers/DemoTumblingWindow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetCrud')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Data Flow runs CRUD operations on a parquet sink using the following Parquet Inputs:\n1. Primary Key Table: a list of primary keys of rows that exist. This can be both the master list of primary keys or just a list of primary keys of rows that have been inserted/updated\n2. Input Data: A List of rows that are inserted, updated and deleted\n3. Existing Data: The existing sink data base\n\nThe output of this Data Flow is the equivalent of a MERGE command in SQL",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PKInput",
								"type": "DatasetReference"
							},
							"name": "PKTable",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ParquetInput",
								"type": "DatasetReference"
							},
							"name": "InputData",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "ParquetCrudOutput",
								"type": "DatasetReference"
							},
							"name": "ExistingData",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetCrudOutput",
								"type": "DatasetReference"
							},
							"name": "ParquetCrudOutput"
						}
					],
					"script": "\n\nsource(output(\n\t\ttable_name as string,\n\t\tupdate_dt as timestamp,\n\t\tPK as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tmoveFiles: ['/providence-health/input/pk','/providence-health/input/pk/moved'],\n\tpartitionBy('roundRobin', 2)) ~> PKTable\nsource(output(\n\t\tPK as integer,\n\t\tcol1 as string,\n\t\tcol2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tmoveFiles: ['/providence-health/input/tables','/providence-health/input/tables/moved'],\n\tpartitionBy('roundRobin', 2)) ~> InputData\nsource(output(\n\t\tPK as integer,\n\t\tcol1 as string,\n\t\tcol2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionBy('roundRobin', 2)) ~> ExistingData\nExistingData, InputData exists(ExistingData@PK == InputData@PK,\n\tnegate:true,\n\tbroadcast: 'none')~> FilterUpdatedData\nInputData, PKTable exists(InputData@PK == PKTable@PK,\n\tnegate:false,\n\tbroadcast: 'none')~> FilterDeletedData\nFilterDeletedData, FilterUpdatedData union(byName: true)~> AppendExistingAndInserted\nAppendExistingAndInserted sink(input(\n\t\tPK as integer,\n\t\tcol1 as string,\n\t\tcol2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionBy('hash', 1)) ~> ParquetCrudOutput"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PKInput')]",
				"[concat(variables('factoryId'), '/datasets/ParquetInput')]",
				"[concat(variables('factoryId'), '/datasets/ParquetCrudOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetCrud')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Data Flow runs CRUD operations on a parquet sink using the following Parquet Inputs:\n1. Primary Key Table: a list of primary keys of rows that exist. This can be both the master list of primary keys or just a list of primary keys of rows that have been inserted/updated\n2. Input Data: A List of rows that are inserted, updated and deleted\n3. Existing Data: The existing sink data base\n\nThe output of this Data Flow is the equivalent of a MERGE command in SQL",
				"activities": [
					{
						"name": "ParquetCrudDataFlow",
						"description": "This Data Flow runs CRUD operations on a parquet sink using the following Parquet Inputs:\n1. Primary Key Table: a list of primary keys of rows that exist. This can be both the master list of primary keys or just a list of primary keys of rows that have been inserted/updated\n2. Input Data: A List of rows that are inserted, updated and deleted\n3. Existing Data: The existing sink data base\n\nThe output of this Data Flow is the equivalent of a MERGE command in SQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParquetCrud",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PKTable": {},
									"InputData": {},
									"ExistingData": {},
									"ParquetCrudOutput": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ParquetCrud')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProvidenceIngestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupMetaData",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"dataset": {
								"referenceName": "SQL_Metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupMetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupMetaData').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyOneTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ',item().TableName,'.PK, ',item().TableName,'.col1, ',item().TableName,'.col2 from ',item().TableName,', CRSTAT where CRSTAT.table_name = ''',item().TableName,''' and ',item().TableName,'.PK = CRSTAT.PK and CRSTAT.update_dt >= ''',item().LastProcessTime,''' and CRSTAT.update_dt < ''',formatDateTime(pipeline().TriggerTime,'s'),''' ')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSetting"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SqlDataSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CopyParquetOutput",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@concat(item().TableName,'_at_',formatDateTime(pipeline().TriggerTime,'s'))",
													"type": "Expression"
												},
												"folderPath": "parquetCrud/input/tables"
											}
										}
									]
								},
								{
									"name": "Update Meta Data Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyOneTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[update_meta_data_table]",
										"storedProcedureParameters": {
											"LastProcessTime": {
												"value": {
													"value": "@formatDateTime(pipeline().TriggerTime,'s')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQL",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Copy PK Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupMetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from  CRSTAT where CRSTAT.update_dt >= '@{activity('LookupMetaData').output.value[0].LastProcessTime}' and CRSTAT.update_dt < '@{formatDateTime(pipeline().TriggerTime,'s')}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSetting"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SqlDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyParquetOutput",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@concat('PK_table_at_',formatDateTime(pipeline().TriggerTime,'s'))",
										"type": "Expression"
									},
									"folderPath": "parquetCrud/input/pk"
								}
							}
						]
					},
					{
						"name": "ParquetCrudDataFLow",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEachSourceTable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy PK Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ParquetCrud",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_Metadata')]",
				"[concat(variables('factoryId'), '/datasets/SqlDataSource')]",
				"[concat(variables('factoryId'), '/datasets/CopyParquetOutput')]",
				"[concat(variables('factoryId'), '/pipelines/ParquetCrud')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL')]"
			]
		}
	]
}