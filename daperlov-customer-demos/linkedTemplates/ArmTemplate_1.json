{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "daperlov-customer-demos"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "TripData",
							"script": "",
							"dataset": {
								"referenceName": "TripData",
								"type": "DatasetReference"
							},
							"typeProperties": {
								"readMode": null
							}
						},
						{
							"name": "TripFares",
							"script": "",
							"dataset": {
								"referenceName": "TripFares",
								"type": "DatasetReference"
							},
							"typeProperties": {
								"readMode": null
							}
						}
					],
					"sinks": [
						{
							"name": "TaxiSink",
							"dataset": {
								"referenceName": "TaxiSink",
								"type": "DatasetReference"
							},
							"script": ""
						}
					],
					"script": "section Section1;\r\nshared TripData = let\r\n  AdfDoc = Web.Contents(\"https://perlovskybugbash.dfs.core.windows.net/sample-data/trip_data_1.csv?sv=2018-03-28&sig=******&sp=rwl\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.None]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]),\r\n  TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName))\r\nin\r\n  TrimmedHeaders;\r\nshared TripFares = let\r\n  AdfDoc = Web.Contents(\"https://perlovskybugbash.dfs.core.windows.net/sample-data/trip_fare_1.csv?sv=2018-03-28&sig=K24uBvy8tdjtMcSHCYzOaYp4j7WcaUXpNBZmw43mmlA%3D&spr=https&se=2019-08-10T16%3A48%3A25Z&srt=sco&ss=bf&sp=rwl\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.None]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]),\r\n  TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName))\r\nin\r\n  TrimmedHeaders;\r\nshared UserQuery = let\r\n  Source = TripData,\r\n  #\"Filtered rows\" = Table.SelectRows(Source, each ([pickup_datetime] <> \"2013-01-01 15:11:48\"))\r\nin\r\n  #\"Filtered rows\";\r\n"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyBlobToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BlobToBlob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ExpenseDetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EyBlobSink",
								"type": "DatasetReference",
								"parameters": {
									"outputFolder": "blob-to-blob"
								}
							}
						]
					}
				],
				"folder": {
					"name": "EY"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetCrud')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Data Flow runs CRUD operations on a parquet sink using the following Parquet Inputs:\n1. Primary Key Table: a list of primary keys of rows that exist. This can be both the master list of primary keys or just a list of primary keys of rows that have been inserted/updated\n2. Input Data: A List of rows that are inserted, updated and deleted\n3. Existing Data: The existing sink data base\n\nThe output of this Data Flow is the equivalent of a MERGE command in SQL",
				"activities": [
					{
						"name": "ParquetCrudDataFlow",
						"description": "This Data Flow runs CRUD operations on a parquet sink using the following Parquet Inputs:\n1. Primary Key Table: a list of primary keys of rows that exist. This can be both the master list of primary keys or just a list of primary keys of rows that have been inserted/updated\n2. Input Data: A List of rows that are inserted, updated and deleted\n3. Existing Data: The existing sink data base\n\nThe output of this Data Flow is the equivalent of a MERGE command in SQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParquetCrud",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PKTable": {},
									"InputData": {},
									"ExistingData": {},
									"ParquetCrudOutput": {}
								}
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Providence"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WranglingMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Movies",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoviesAnalytics",
								"type": "DataFlowReference",
								"datasetParameters": {
									"MoviesDB": {},
									"MoviesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"computeType": "General",
								"coreCount": 8
							}
						}
					}
				],
				"folder": {
					"name": "WranglingDataflows"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WranglingTaxi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TaxiDemo",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TaxiDemo",
								"type": "DataFlowReference",
								"datasetParameters": {
									"TripData": {},
									"TripFares": {},
									"TaxiSink": {}
								}
							},
							"staging": {},
							"compute": {
								"computeType": "General",
								"coreCount": 8
							}
						}
					}
				],
				"folder": {
					"name": "WranglingDataflows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TaxiDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProvidenceIngestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupMetaData",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"dataset": {
								"referenceName": "SQL_Metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupMetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupMetaData').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyOneTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ',item().TableName,'.PK, ',item().TableName,'.col1, ',item().TableName,'.col2 from ',item().TableName,', CRSTAT where CRSTAT.table_name = ''',item().TableName,''' and ',item().TableName,'.PK = CRSTAT.PK and CRSTAT.update_dt >= ''',item().LastProcessTime,''' and CRSTAT.update_dt < ''',formatDateTime(pipeline().TriggerTime,'s'),''' ')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SqlDataSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CopyParquetOutput",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@concat(item().TableName,'_at_',formatDateTime(pipeline().TriggerTime,'s'))",
													"type": "Expression"
												},
												"folderPath": "parquetCrud/input/tables"
											}
										}
									]
								},
								{
									"name": "Update Meta Data Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyOneTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[update_meta_data_table]",
										"storedProcedureParameters": {
											"LastProcessTime": {
												"value": {
													"value": "@formatDateTime(pipeline().TriggerTime,'s')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQL",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Copy PK Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupMetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from  CRSTAT where CRSTAT.update_dt >= '@{activity('LookupMetaData').output.value[0].LastProcessTime}' and CRSTAT.update_dt < '@{formatDateTime(pipeline().TriggerTime,'s')}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SqlDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyParquetOutput",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@concat('PK_table_at_',formatDateTime(pipeline().TriggerTime,'s'))",
										"type": "Expression"
									},
									"folderPath": "parquetCrud/input/pk"
								}
							}
						]
					},
					{
						"name": "ParquetCrudDataFLow",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEachSourceTable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy PK Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ParquetCrud",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "Providence"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ParquetCrud')]"
			]
		}
	]
}